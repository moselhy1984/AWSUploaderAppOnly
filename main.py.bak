#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import getmac
from PyQt5.QtWidgets import QApplication, QMessageBox, QDialog
from config.secure_config import SecureConfigManager
from database.db_manager import DatabaseManager
from ui.login_dialog import LoginDialog
from ui.uploader_gui import S3UploaderGUI
from pathlib import Path

def main():
    """Main entry point for the application"""
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    
    try:
        # Check if we're in safe mode
        safe_mode = os.environ.get('SAFE_MODE', '0') == '1'
        if safe_mode:
            print("Running in safe mode: some advanced features will be disabled")
        
        # Initialize database manager
        db_manager = DatabaseManager()
        if not db_manager.connect():
            QMessageBox.critical(
                None, 
                "Database Error", 
                "Failed to connect to the database. Check your internet connection and try again."
            )
            return
        
        # Initialize secure config manager
        config_manager = SecureConfigManager()
        
        # Check if config file exists
        if not config_manager.config_path.exists():
            QMessageBox.critical(
                None, 
                "Configuration Error", 
                "Configuration file not found!\n\nMake sure 'config.enc' is in the same directory as the application."
            )
            return
        
        # Check if encryption key file exists
        if not config_manager.key_path.exists():
            QMessageBox.critical(
                None, 
                "Key Error", 
                "Encryption key file not found!\n\nMake sure 'encryption_key.txt' is in the same directory as the application."
            )
            return
        
        try:
            # Decrypt configuration
            aws_config = config_manager.decrypt_config()
            
            # Skip mandatory login at startup
            # Create default user info
            result = {
                'Emp_FullName': 'Guest',
                'is_logged_in': False,
                'username': 'guest'
            }
            
            # Check if we should skip loading state
            skip_state_load = os.environ.get('SKIP_STATE_LOAD', '0') == '1'
            
            # Check if we should auto-resume tasks
            auto_resume = os.environ.get('AUTO_RESUME', '0') == '1'
            
            # Disable auto-resume in safe mode
            if safe_mode:
                auto_resume = False
                print("Auto-resume disabled in safe mode")
            
            # Start main application
            window = S3UploaderGUI(aws_config, db_manager, result, skip_state_load=skip_state_load, auto_resume=auto_resume, safe_mode=safe_mode)
            window.show()
            window.log_message("Application started successfully")
            window.log_message(f"Connected to bucket: {aws_config['bucket']}")
            
            # Show safety mode message if enabled
            if safe_mode:
                QMessageBox.warning(
                    window,
                    "Running in Safe Mode",
                    "The application is running in safe mode due to repeated crashes.\n"
                    "Some advanced features are disabled, including automatic task resumption.\n"
                    "You can run tasks manually and performance will be more closely monitored."
                )
            
            return app.exec_()
            
        except ValueError as e:
            QMessageBox.critical(None, "Configuration Error", str(e))
            return
            
    except Exception as e:
        QMessageBox.critical(None, "Application Error", f"An error occurred: {str(e)}")
        return

if __name__ == '__main__':
    main()